// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Roles
enum UserRole {
  STUDENT
  MENTOR
  EMPLOYER
  ADMIN
}

// User Model (base for all users)
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String?
  image     String?
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student  Student?
  mentor   Mentor?
  employer Employer?

  // Shared relations
  notifications Notification[]
  messages      Message[]
  messagesSent  Message[]      @relation("SentMessages")

  @@map("users")
}

// Student Model
model Student {
  id             String  @id @default(cuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio            String?
  university     String?
  graduationYear Int?
  gpa            Float?
  skillsAssessed Boolean @default(false)
  portfolioUrl   String?

  // Relations
  skills             StudentSkill[]
  enrollments        CourseEnrollment[]
  projectApplicants  ProjectApplicant[]
  completedProjects  CompletedProject[]
  mentorshipSessions MentorshipSession[]

  @@map("students")
}

// Mentor Model
model Mentor {
  id              String  @id @default(cuid())
  userId          String  @unique
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?
  company         String?
  position        String?
  yearsExperience Int?
  hourlyRate      Float?
  linkedInUrl     String?
  availability    Json?

  // Relations
  expertise          MentorExpertise[]
  mentorshipSessions MentorshipSession[]
  projectReviews     ProjectReview[]
  courses            Course[]

  @@map("mentors")
}

// Employer Model
model Employer {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName String
  industry    String?
  website     String?
  size        String?
  description String?
  logo        String?

  // Relations
  projects Project[]

  @@map("employers")
}

// Skill Model
model Skill {
  id        String   @id @default(cuid())
  name      String   @unique
  category  String
  createdAt DateTime @default(now())

  // Relations
  studentSkills   StudentSkill[]
  mentorExpertise MentorExpertise[]
  projectSkills   ProjectSkill[]

  @@map("skills")
}

// Student Skills
model StudentSkill {
  id        String  @id @default(cuid())
  studentId String
  skillId   String
  level     Int // 1-5 rating
  verified  Boolean @default(false)

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([studentId, skillId])
  @@map("student_skills")
}

// Mentor Expertise
model MentorExpertise {
  id       String @id @default(cuid())
  mentorId String
  skillId  String
  level    Int // 1-5 rating

  // Relations
  mentor Mentor @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  skill  Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([mentorId, skillId])
  @@map("mentor_expertise")
}

// Project Model
model Project {
  id          String    @id @default(cuid())
  employerId  String
  title       String
  description String
  isPaid      Boolean   @default(false)
  budget      Float?
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String    @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, CANCELLED

  // Relations
  employer    Employer           @relation(fields: [employerId], references: [id], onDelete: Cascade)
  skills      ProjectSkill[]
  applicants  ProjectApplicant[]
  completedBy CompletedProject[]
  reviews     ProjectReview[]

  @@map("projects")
}

// Project Skills
model ProjectSkill {
  id        String @id @default(cuid())
  projectId String
  skillId   String

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([projectId, skillId])
  @@map("project_skills")
}

// Project Applicants
model ProjectApplicant {
  id          String   @id @default(cuid())
  projectId   String
  studentId   String
  coverLetter String?
  status      String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  appliedAt   DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([projectId, studentId])
  @@map("project_applicants")
}

// Completed Projects
model CompletedProject {
  id            String   @id @default(cuid())
  projectId     String
  studentId     String
  submissionUrl String?
  completedAt   DateTime @default(now())

  // Relations
  project Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  student Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  reviews ProjectReview[]

  @@unique([projectId, studentId])
  @@map("completed_projects")
}

// Project Reviews
model ProjectReview {
  id                 String   @id @default(cuid())
  completedProjectId String
  mentorId           String?
  rating             Int // 1-5 rating
  feedback           String?
  createdAt          DateTime @default(now())

  // Relations
  completedProject CompletedProject @relation(fields: [completedProjectId], references: [id], onDelete: Cascade, map: "project_reviews_completedProject_fkey")
  mentor           Mentor?          @relation(fields: [mentorId], references: [id], map: "project_reviews_mentor_fkey")
  project          Project          @relation(fields: [completedProjectId], references: [id], map: "project_reviews_project_fkey")

  @@map("project_reviews")
}

// Course Model
model Course {
  id          String   @id @default(cuid())
  mentorId    String?
  title       String
  description String
  level       String // BEGINNER, INTERMEDIATE, ADVANCED
  duration    Int // in hours
  price       Float?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  mentor      Mentor?            @relation(fields: [mentorId], references: [id])
  modules     CourseModule[]
  enrollments CourseEnrollment[]

  @@map("courses")
}

// Course Module
model CourseModule {
  id          String  @id @default(cuid())
  courseId    String
  title       String
  description String?
  order       Int
  videoUrl    String?

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_modules")
}

// Course Enrollment
model CourseEnrollment {
  id          String    @id @default(cuid())
  courseId    String
  studentId   String
  progress    Int       @default(0) // percentage
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  // Relations
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId])
  @@map("course_enrollments")
}

// Mentorship Session
model MentorshipSession {
  id           String   @id @default(cuid())
  mentorId     String
  studentId    String
  title        String?
  description  String?
  startTime    DateTime
  endTime      DateTime
  status       String   @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  zoomMeetLink String?

  // Relations
  mentor  Mentor  @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("mentorship_sessions")
}

// Notification Model
model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  type      String // PROJECT_APPLIED, MENTORSHIP_BOOKED, etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Message Model
model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation(fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}
